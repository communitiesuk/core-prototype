{# Set edit state based on scheme status #}
{% set isCompleted = scheme.completed == "true" %}

{# Set variables to test various user selected data #}
{% set hasPostcode = scheme["postcode-known"] == "true" %}
{% set hasLocalAuthority = scheme["local-authority-known"] == "true" %}
{% set localAuthority = localAuthorities | where("gss", scheme["local-authority"]) | first %}

{{ rigSummaryCard({
  classes: "govuk-!-margin-bottom-6",
  titleText: "Scheme details",
  rows: [{
    key: {
      text: "Name"
    },
    value: {
      text: scheme.name
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "name"
    })
  }, {
    key: {
      text: "Type of scheme"
    },
    value: {
      text: scheme.type | textFromInputValue(data.questions["type-of-scheme"])
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "type of scheme"
    })
  }, {
    key: {
      text: "Confidential"
    },
    value: {
      text: scheme.confidential | textFromInputValue(data.questions["yes-no"])
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "if confidential"
    })
  }, {
    key: {
      text: "Includes Supporting People grant"
    },
    value: {
      text: scheme["sp-grant"] | textFromInputValue(data.questions["yes-no"])
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "if includes Supporting People grant"
    })
  }, {
    key: {
      text: "Postcode"
    },
    value: {
      html: macro.entityHtml(scheme.postcode, false, localAuthority.name) if hasPostcode else "Not known"
    },
    actions: actionLinks({
      href: schemePath + "/postcode",
      visuallyHiddenText: "postcode"
    })
  }, {
    key: {
      text: "Local authority"
    },
    value: {
      text: scheme["local-authority"] | textFromInputValue(data.questions["local-authorities"]) if hasLocalAuthority else "Not known"
    },
    actions: actionLinks({
      href: schemePath + "/local-authority",
      visuallyHiddenText: "local authority"
    })
  } if not hasPostcode]
}) }}

{{ rigSummaryCard({
  classes: "govuk-!-margin-bottom-6",
  titleText: "Clients",
  rows: [{
    key: {
      text: "Client groups"
    },
    value: {
      html: scheme["client-groups"] | textFromInputValue(data.questions["client-groups"]) | replace(",", "<br>")
    },
    actions: actionLinks({
      href: schemePath + "/client-groups",
      visuallyHiddenText: "client groups"
    })
  }, {
    key: {
      text: "Registered care home"
    },
    value: {
      text: scheme["type-of-registered-home"] | textFromInputValue(data.questions["type-of-registered-home"])
    },
    actions: actionLinks({
      href: schemePath + "/type-of-registered-home",
      visuallyHiddenText: "registered care home"
    })
  }, {
    key: {
      text: "Level of support given"
    },
    value: {
      text: scheme["type-of-support"] | textFromInputValue(data.questions["type-of-support"])
    },
    actions: actionLinks({
      href: schemePath + "/type-of-support",
      visuallyHiddenText: "type of support"
    })
  }, {
    key: {
      text: "Intended length of stay"
    },
    value: {
      text: scheme["intended-stay"] | textFromInputValue(data.questions["intended-stay"])
    },
    actions: actionLinks({
      href: schemePath + "/intended-stay",
      visuallyHiddenText: "intended length of stay"
    })
  }]
}) }}

{{ rigSummaryCard({
  classes: "govuk-!-margin-bottom-6",
  titleText: "Property information",
  rows: [{
    key: {
      text: "Type of unit"
    },
    value: {
      text: scheme["type-of-unit"] | textFromInputValue(data.questions["type-of-unit"])
    },
    actions: actionLinks({
      href: schemePath + "/type-of-unit",
      visuallyHiddenText: "type of unit"
    })
  }, {
    key: {
      text: "Number of units"
    },
    value: {
      text: scheme.units
    },
    actions: actionLinks({
      href: schemePath + "/units",
      visuallyHiddenText: "number of units"
    })
  }, {
    key: {
      text: "Type of building"
    },
    value: {
      text: scheme["type-of-building"] | textFromInputValue(data.questions["type-of-building"])
    },
    actions: actionLinks({
      href: schemePath + "/type-of-building",
      visuallyHiddenText: "type of building"
    })
  }, {
    key: {
      text: "Wheelchair adaptation"
    },
    value: {
      text: scheme["is-adapted"] | textFromInputValue(data.questions["yes-no"])
    },
    actions: actionLinks({
      href: schemePath + "/is-adapted",
      visuallyHiddenText: "if property has been built or adapted to wheelchair-user standards"
    })
  }]
}) }}

{{ rigSummaryCard({
  classes: "govuk-!-margin-bottom-6",
  titleText: "Dates",
  rows: [{
    key: {
      text: "Scheme dates"
    },
    value: {
      html: (scheme["start-date"] | govukDate) + (" to " + (scheme["end-date"] | govukDate) if scheme["end-date-known"] == "true")
    },
    actions: actionLinks({
      href: schemePath + "/dates",
      visuallyHiddenText: "scheme dates"
    })
  }]
}) }}

{# Allow all answers to be edited, for now.
  {{ govukDetails({
    summaryText: "Why can’t I change some of these answers?",
    html: "We ask different questions in logs based on the answers you give us."
  }) if isCompleted else govukWarningText({
    text: "You won’t be able to change some of these answers after you’ve saved them.",
    iconFallbackText: "Warning"
  }) }}
#}
