{% set propertiesCount = scheme.properties | length %}

{% set detailsHtml %}
  {{ govukSummaryList({
    rows: [{
      key: {
        text: "Name"
      },
      value: {
        text: scheme.name
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "name"
      })
    }, {
      key: {
        text: "Managing agent"
      },
      value: {
        text: organisations[scheme.agentId].name
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "managing agent"
      })
    }, {
      key: {
        text: "Type of service"
      },
      value: {
        text: scheme.type | textFromInputValue(data.questions["type-of-scheme"])
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "type of service"
      })
    }, {
      key: {
        text: "Confidential"
      },
      value: {
        text: "Yes" if scheme.confidential else "No"
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "if confidential"
      })
    }, {
      key: {
        text: "Client groups"
      },
      value: {
        html: scheme["client-groups"] | textFromInputValue(data.questions["client-groups"]) | replace(",", "<br>")
      },
      actions: actionLinks({
        href: schemePath + "/client-groups",
        visuallyHiddenText: "client groups"
      })
    }, {
      key: {
        text: "Level of support given"
      },
      value: {
        text: scheme["type-of-support"] | textFromInputValue(data.questions["type-of-support"])
      },
      actions: actionLinks({
        href: schemePath + "/type-of-support",
        visuallyHiddenText: "type of support"
      })
    }, {
      key: {
        text: "Intended length of stay"
      },
      value: {
        text: scheme["intended-stay"] | textFromInputValue(data.questions["intended-stay"])
      },
      actions: actionLinks({
        href: schemePath + "/intended-stay",
        visuallyHiddenText: "intended length of stay"
      })
    }, {
      key: {
        text: "Operating dates"
      },
      value: {
        html: (scheme["start-date"] | textFromInputValue | govukDate) + (" to " + (scheme["end-date"] | textFromInputValue | govukDate) if scheme["end-date-known"] == "true")
      },
      actions: actionLinks({
        href: schemePath + "/dates",
        visuallyHiddenText: "service dates"
      })
    }]
  }) }}
{% endset %}

{% set propertiesHtml %}
  {% for itemId, property in scheme.properties %}
    <h2 class="govuk-heading-m govuk-!-margin-bottom-2">{{ property.address }}</h2>
    {{ govukSummaryList({
      classes: "govuk-!-margin-bottom-9" if not loop.last else "",
      rows: [{
        key: {
          text: "Postcode"
        },
        value: {
          text: macro.postcodeHtml(property.postcode, property["local-authority"].name) if property.postcode else "Not known"
        },
        actions: actionLinks({
          href: schemePath + "/property/" + itemId,
          visuallyHiddenText: "postcode"
        })
      }, {
        key: {
          text: "Type of unit"
        },
        value: {
          text: property["type-of-unit"] | textFromInputValue(data.questions["type-of-unit"])
        },
        actions: actionLinks({
          href: schemePath + "/property/" + itemId,
          visuallyHiddenText: "type of unit"
        })
      }, {
        key: {
          text: "Number of units"
        },
        value: {
          text: property.units
        },
        actions: actionLinks({
          href: schemePath + "/property/" + itemId,
          visuallyHiddenText: "number of units"
        })
      }, {
        key: {
          text: "Type of building"
        },
        value: {
          text: property["type-of-building"] | textFromInputValue(data.questions["type-of-building"])
        },
        actions: actionLinks({
          href: schemePath + "/property/" + itemId,
          visuallyHiddenText: "type of building"
        })
      }, {
      key: {
        text: "Registered care home"
      },
      value: {
        text: property["registered-home"] | textFromInputValue(data.questions["registered-home"])
      },
      actions: actionLinks({
        href: schemePath + "/property/" + itemId,
        visuallyHiddenText: "if property is a registered care home"
      })
    }, {
        key: {
          text: "Wheelchair adaptation"
        },
        value: {
          text: property["is-adapted"] | textFromInputValue(data.questions["yes-no"])
        },
        actions: actionLinks({
          href: schemePath + "/property/" + itemId,
          visuallyHiddenText: "if property has been built or adapted to wheelchair-user standards"
        })
      }]
    }) }}
  {% endfor %}
{% endset %}

{{ govukTabs({
  items: [
    {
      label: "Service details",
      id: "details",
      panel: {
        html: detailsHtml
      }
    }, {
      label: propertiesCount + " properties" if propertiesCount > 1 else "Property details",
      id: "properties",
      panel: {
        html: propertiesHtml
      }
    }
  ]
}) }}

{# Allow all answers to be edited, for now.
  {{ govukDetails({
    summaryText: "Why can’t I change some of these answers?",
    html: "We ask different questions in logs based on the answers you give us."
  }) if isCompleted else govukWarningText({
    text: "You won’t be able to change some of these answers after you’ve saved them.",
    iconFallbackText: "Warning"
  }) }}
#}
