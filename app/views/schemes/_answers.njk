{% set locationsCount = scheme.locations | length %}

{% set detailsHtml %}
  {{ govukSummaryList({
    rows: [{
        key: {
          text: "Status"
        },
        value: {
          html: govukTag({
            classes: "govuk-tag--" + data.statuses[scheme.status].colour,
            text: data.statuses[scheme.status].text
          })
        }
      }, {
      key: {
        text: "Group code"
      },
      value: {
        classes: "app-!-font-tabular",
        text: "S" + scheme.id
      }
    }, {
      key: {
        text: "Name"
      },
      value: {
        text: scheme.name
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "name"
      })
    }, {
      key: {
        text: "Confidential information"
      },
      value: {
        text: "Yes" if scheme.confidential else "No"
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "if confidential"
      })
    }, {
      key: {
        text: "Managing agent"
      },
      value: {
        text: organisations[scheme.agentId].name
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "managing agent"
      })
    }, {
      key: {
        text: "Type of service"
      },
      value: {
        text: scheme.type | textFromInputValue(data.questions["type-of-scheme"])
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "type of service"
      })
    }, {
      key: {
        html: "Registered under Care Standards Act 2000" | noOrphans
      },
      value: {
        text: scheme["registered-home"] | textFromInputValue(data.questions["registered-home"])
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "if service is a registered as a care home"
      })
    }, {
      key: {
        html: "Total number of units or bedrooms" | noOrphans
      },
      value: {
        text: scheme.units
      },
      actions: actionLinks({
        href: schemePath + "/details",
        visuallyHiddenText: "total number of units or bedrooms"
      })
    }, {
      key: {
        text: "Primary client group"
      },
      value: {
        html: scheme["primary-client-group"] | textFromInputValue(data.questions["client-groups"])
      },
      actions: actionLinks({
        href: schemePath + "/primary-client-group",
        visuallyHiddenText: "primary client group"
      })
    }, {
      key: {
        text: "Secondary client group"
      },
      value: {
        html: (scheme["secondary-client-group"] | textFromInputValue(data.questions["client-groups"])) if scheme["has-secondary-client-group"] else "None"
      },
      actions: actionLinks({
        href: schemePath + "/secondary-client-group",
        visuallyHiddenText: "secondary client group"
      })
    }, {
      key: {
        text: "Level of support given"
      },
      value: {
        text: scheme["type-of-support"] | textFromInputValue(data.questions["type-of-support"])
      },
      actions: actionLinks({
        href: schemePath + "/support",
        visuallyHiddenText: "level of support"
      })
    }, {
      key: {
        html: "Intended length of stay" | noOrphans
      },
      value: {
        text: scheme["intended-stay"] | textFromInputValue(data.questions["intended-stay"])
      },
      actions: actionLinks({
        href: schemePath + "/support",
        visuallyHiddenText: "intended length of stay"
      })
    }]
  }) }}
{% endset %}

{% set locationsHtml %}
  {% for itemId, location in scheme.locations %}
    {{ govukSummaryList({
      classes: "govuk-!-margin-bottom-9" if not loop.last else "",
      rows: [{
        key: {
          text: "Scheme code"
        },
        value: {
          classes: "app-!-font-tabular",
          text: "P" + scheme.id + "-" + location.postcode | replace(" ", "")
        }
      }, {
        key: {
          text: "Postcode"
        },
        value: {
          text: macro.postcodeHtml(location.postcode, location["local-authority"].name) if location.postcode else "Not known"
        },
        actions: actionLinks({
          href: schemePath + "/location/" + itemId,
          visuallyHiddenText: "postcode"
        })
      }, {
        key: {
          text: "Type of unit"
        },
        value: {
          text: location["type-of-unit"] | textFromInputValue(data.questions["type-of-unit"].supported)
        },
        actions: actionLinks({
          href: schemePath + "/location/" + itemId,
          visuallyHiddenText: "type of unit"
        })
      }, {
        key: {
          text: "Type of building"
        },
        value: {
          text: location["type-of-building"] | textFromInputValue(data.questions["type-of-building"])
        },
        actions: actionLinks({
          href: schemePath + "/location/" + itemId,
          visuallyHiddenText: "type of building"
        })
      }, {
        key: {
          text: "Wheelchair adaptation"
        },
        value: {
          text: location["is-adapted"] | textFromInputValue(data.questions["yes-no"])
        },
        actions: actionLinks({
          href: schemePath + "/location/" + itemId,
          visuallyHiddenText: "if location has been built or adapted to wheelchair-user standards"
        })
      }]
    }) }}
  {% endfor %}

  {{ govukButton({
    classes: "govuk-button--secondary",
    text: "Add another location",
    href: schemePath + "/location/new"
  }) }}
{% endset %}

{{ govukTabs({
  items: [
    {
      label: "Service details",
      id: "details",
      panel: {
        html: detailsHtml
      }
    }, {
      label: locationsCount + " locations" if locationsCount > 1 else "Location",
      id: "locations",
      panel: {
        html: locationsHtml
      }
    }
  ]
}) }}

{# Allow all answers to be edited, for now.
  {{ govukDetails({
    summaryText: "Why can’t I change some of these answers?",
    html: "We ask different questions in logs based on the answers you give us."
  }) if isCompleted else govukWarningText({
    text: "You won’t be able to change some of these answers after you’ve saved them.",
    iconFallbackText: "Warning"
  }) }}
#}
