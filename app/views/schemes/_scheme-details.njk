{% set descoped = true %}
{{ govukSummaryList({
  rows: [{
    key: {
      text: "Scheme code"
    },
    value: {
      classes: "app-!-font-tabular",
      text: "S" + scheme.id
    }
  }, {
    key: {
      text: "Name"
    },
    value: {
      text: scheme.name
    },
    actions: actionLinks({
      href: schemePath + "/details-simple",
      visuallyHiddenText: "name"
    }) if not scheme.deactivated
  }, {
    key: {
      text: "Confidential information"
    },
    value: {
      text: "Yes" if scheme.confidential else "No"
    },
    actions: actionLinks({
      href: schemePath + "/details-simple",
      visuallyHiddenText: "if confidential"
    }) if not scheme.deactivated
  }, {
    key: {
      text: "Type of scheme"
    },
    value: {
      text: scheme.type | textFromInputValue(data.questions["type-of-scheme"])
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "type of scheme"
    }) if not descoped
  }, {
    key: {
      html: "Registered under Care Standards Act 2000" | noOrphans
    },
    value: {
      text: scheme["registered-home"] | textFromInputValue(data.questions["registered-home"])
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "if scheme is a registered as a care home"
    }) if not descoped
  }, {
    key: {
      text: "Housing stock owned by"
    },
    value: {
      text: organisations[scheme.ownerId].name
    },
    actions: actionLinks({
      href: schemePath + "/details-simple",
      visuallyHiddenText: "who owns the housing stock for this scheme"
    }) if not scheme.deactivated
  } if isAdmin, {
    key: {
      html: "Support services provided by" | noOrphans
    },
    value: {
      text: scheme.arrangement | textFromInputValue(data.questions.arrangement)
    },
    actions: actionLinks({
      href: schemePath + "/details",
      visuallyHiddenText: "who manages this scheme"
    }) if not descoped
  }, {
    key: {
      text: "Organisation providing support"
    },
    value: {
      text: organisations[scheme.agentId].name
    },
    actions: actionLinks({
      href: schemePath + "/agent",
      visuallyHiddenText: "organisation that manages this scheme"
    }) if not descoped
  } if scheme.arrangement != "owner", {
    key: {
      text: "Primary client group"
    },
    value: {
      html: scheme["primary-client-group"] | textFromInputValue(data.questions["client-groups"])
    },
    actions: actionLinks({
      href: schemePath + "/primary-client-group",
      visuallyHiddenText: "primary client group"
    }) if not descoped
  }, {
    key: {
      text: "Has another client group"
    },
    value: {
      html: (scheme["has-secondary-client-group"] | textFromInputValue(data.questions["yes-no"]))
    },
    actions: actionLinks({
      href: schemePath + "/has-secondary-client-group",
      visuallyHiddenText: "has another client group"
    }) if not descoped
  }, {
    key: {
      text: "Secondary client group"
    },
    value: {
      html: (scheme["secondary-client-group"] | textFromInputValue(data.questions["client-groups"]))
    },
    actions: actionLinks({
      href: schemePath + "/secondary-client-group",
      visuallyHiddenText: "secondary client group"
    }) if not descoped
  } if scheme["has-secondary-client-group"] !== "false", {
    key: {
      text: "Level of support given"
    },
    value: {
      text: scheme["type-of-support"] | textFromInputValue(data.questions["type-of-support"])
    },
    actions: actionLinks({
      href: schemePath + "/support",
      visuallyHiddenText: "level of support"
    }) if not descoped
  }, {
    key: {
      html: "Intended length of stay" | noOrphans
    },
    value: {
      text: scheme["intended-stay"] | textFromInputValue(data.questions["intended-stay"])
    },
    actions: actionLinks({
      href: schemePath + "/support",
      visuallyHiddenText: "intended length of stay"
    }) if not descoped
  }]
}) }}
